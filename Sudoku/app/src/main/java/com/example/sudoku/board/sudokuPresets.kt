package com.example.sudoku.board

import kotlin.random.Random

class SudokuPresetsDifficulty {
    private val easyPuzzles = arrayOf(
        "000530001300089002900001045002007400009000100008200500560400003800150004100078000",
        "800021000036000482005400016070100005000000000400007030750003200961000350000860001",
        "064070100059800006100000090000750300430060017006043000090000001700002450005010680",
        "730008050049300020000007103000004080920060015050100000603200000070009240010800069",
        "800009150020000006050306084612000000004000300000000428130207090200000010098500003",
        "000009305080000900400170020800900003093504810700003009060028004002000080108300000",
        "000075600360002070080604020600009000801000503000300002070406010090700048002910000",
        "010200060003100000200076039057600001008000300300001690830590002000007800040002050",
        "060700000900000748005001006610004800407080109002900037100200900594000003000005070",
        "450003000000870300237090000905008000806040509000100408000020837001084000000500041"
    )
    private val mediumPuzzles = arrayOf(
        "000520001000048502400000730250061070000000000070950064037000006104270000800035000",
        "000360014000002903001708000946081000000000000000240168000804200502100000360027000",
        "047001290000400001300070000406700800500602007003005904000010003700004000039200740",
        "009300000004010000038059104000205007043000280900407000805720410000060700000001600",
        "036004080209050000070000900090402000402103706000507020004000060000020804010700530",
        "000070200000802790003000068200150040080406070040037006460000900017305000002090000",
        "002040610500002009700050280000804920000000000027109000075010008800400002041030500",
        "956007080100002050000160300003000560000608000071000400008016000060700001010500296",
        "600900000805300070340200100500006000286000597000500003001002035050003406000007002",
        "480520000091000080700001600000210058007000100120053000003800007040000210000032049"
    )

    private val hardPuzzles = arrayOf(
        arrayOf(
            intArrayOf(8, 0, 0, 7, 3, 9, 0, 0, 6),
            intArrayOf(3, 7, 0, 4, 6, 5, 0, 0, 0),
            intArrayOf(0, 4, 0, 1, 8, 2, 0, 0, 9),
            intArrayOf(0, 0, 0, 6, 0, 0, 0, 4, 0),
            intArrayOf(0, 5, 4, 3, 0, 0, 6, 1, 0),
            intArrayOf(0, 6, 0, 5, 0, 0, 0, 0, 0),
            intArrayOf(4, 0, 0, 8, 5, 3, 0, 7, 0),
            intArrayOf(0, 0, 0, 2, 7, 1, 0, 6, 4),
            intArrayOf(1, 0, 0, 9, 4, 0, 0, 0, 2)
        ),
        arrayOf(
            intArrayOf(8, 0, 0, 7, 3, 9, 0, 0, 6),
            intArrayOf(3, 7, 0, 4, 6, 5, 0, 0, 0),
            intArrayOf(0, 4, 0, 1, 8, 2, 0, 0, 9),
            intArrayOf(0, 0, 0, 6, 0, 0, 0, 4, 0),
            intArrayOf(0, 5, 4, 3, 0, 0, 6, 1, 0),
            intArrayOf(0, 6, 0, 5, 0, 0, 0, 0, 0),
            intArrayOf(4, 0, 0, 8, 5, 3, 0, 7, 0),
            intArrayOf(0, 0, 0, 2, 7, 1, 0, 6, 4),
            intArrayOf(1, 0, 0, 9, 4, 0, 0, 0, 2)
        )
    )

    private val expertPuzzles = arrayOf(
        arrayOf(
            intArrayOf(8, 0, 0, 7, 3, 9, 0, 0, 6),
            intArrayOf(3, 7, 0, 4, 6, 5, 0, 0, 0),
            intArrayOf(0, 4, 0, 1, 8, 2, 0, 0, 9),
            intArrayOf(0, 0, 0, 6, 0, 0, 0, 4, 0),
            intArrayOf(0, 5, 4, 3, 0, 0, 6, 1, 0),
            intArrayOf(0, 6, 0, 5, 0, 0, 0, 0, 0),
            intArrayOf(4, 0, 0, 8, 5, 3, 0, 7, 0),
            intArrayOf(0, 0, 0, 2, 7, 1, 0, 6, 4),
            intArrayOf(1, 0, 0, 9, 4, 0, 0, 0, 2)
        ),
        arrayOf(
            intArrayOf(8, 0, 0, 7, 3, 9, 0, 0, 6),
            intArrayOf(3, 7, 0, 4, 6, 5, 0, 0, 0),
            intArrayOf(0, 4, 0, 1, 8, 2, 0, 0, 9),
            intArrayOf(0, 0, 0, 6, 0, 0, 0, 4, 0),
            intArrayOf(0, 5, 4, 3, 0, 0, 6, 1, 0),
            intArrayOf(0, 6, 0, 5, 0, 0, 0, 0, 0),
            intArrayOf(4, 0, 0, 8, 5, 3, 0, 7, 0),
            intArrayOf(0, 0, 0, 2, 7, 1, 0, 6, 4),
            intArrayOf(1, 0, 0, 9, 4, 0, 0, 0, 2)
        )
    )
    fun returnPreset(difficultySelect: Int): String {

        return when (difficultySelect) {
            1 -> {
                val rand = java.util.Random().nextInt(easyPuzzles.size)
                easyPuzzles[rand]
            }
            else -> ""
        }
    }
}