import unittest
from copy import deepcopy

import numpy.testing as numtest
import sudokuSolver as ss


class TestFindNextCoordinates(unittest.TestCase):
    def test_first_empty(self):
        grid = [[0, 2, 7, 5, 9, 8, 1, 4, 3],
                [9, 4, 8, 2, 1, 0, 6, 7, 5],
                [5, 3, 1, 7, 4, 6, 2, 9, 8],
                [7, 5, 4, 6, 2, 9, 3, 8, 1],
                [8, 9, 6, 3, 5, 1, 4, 2, 7],
                [2, 1, 3, 4, 8, 7, 9, 5, 0],
                [1, 6, 9, 8, 7, 2, 5, 3, 4],
                [4, 7, 2, 1, 3, 5, 8, 6, 9],
                [3, 8, 5, 9, 6, 4, 7, 1, 2]]

        x, y = ss.find_next_coordinates(grid, 0, 0)
        self.assertEqual(x, 0)
        self.assertEqual(y, 0)

    def test_no_empty(self):
        grid = [[1, 2, 7, 5, 9, 8, 1, 4, 3],
                [9, 4, 8, 2, 1, 1, 6, 7, 5],
                [5, 3, 1, 7, 4, 6, 2, 9, 8],
                [7, 5, 4, 6, 2, 9, 3, 8, 1],
                [8, 9, 6, 3, 5, 1, 4, 2, 7],
                [2, 1, 3, 4, 8, 7, 9, 5, 1],
                [1, 6, 9, 8, 7, 2, 5, 3, 4],
                [4, 7, 2, 1, 3, 5, 8, 6, 9],
                [3, 8, 5, 9, 6, 4, 7, 1, 2]]

        x, y = ss.find_next_coordinates(grid, 0, 0)
        self.assertEqual(x, -1)
        self.assertEqual(y, 0)

    def test_any_empty(self):
        grid = [[1, 2, 7, 5, 9, 8, 1, 4, 3],
                [9, 4, 8, 2, 1, 0, 6, 7, 5],
                [5, 3, 1, 7, 4, 6, 2, 9, 8],
                [7, 5, 4, 6, 2, 9, 3, 8, 1],
                [8, 9, 6, 3, 5, 1, 4, 2, 7],
                [2, 1, 3, 4, 8, 7, 9, 5, 0],
                [1, 6, 9, 8, 7, 2, 5, 3, 4],
                [4, 7, 2, 1, 3, 5, 8, 6, 9],
                [3, 8, 5, 9, 6, 4, 7, 1, 2]]

        x, y = ss.find_next_coordinates(grid, 0, 0)
        self.assertEqual(x, 1)
        self.assertEqual(y, 5)


class TestCheckRows(unittest.TestCase):
    def test_false(self):
        grid = [[6, 2, 7, 5, 9, 8, 1, 4, 3],
                [9, 4, 8, 2, 1, 3, 6, 7, 5],
                [5, 3, 1, 7, 4, 6, 2, 9, 8],
                [7, 5, 4, 6, 2, 9, 3, 8, 1],
                [8, 9, 6, 3, 5, 1, 4, 2, 7],
                [2, 1, 3, 4, 8, 7, 9, 5, 0],
                [1, 6, 9, 8, 7, 2, 5, 3, 4],
                [4, 7, 2, 1, 3, 5, 8, 6, 9],
                [3, 8, 5, 9, 6, 4, 7, 1, 2]]
        self.assertFalse(ss.check_rows(grid, 2, 1, 3))

    def test_true(self):
        grid = [[6, 2, 7, 5, 9, 8, 1, 4, 3],
                [9, 4, 8, 2, 1, 2, 6, 7, 5],
                [5, 3, 1, 7, 4, 6, 2, 9, 8],
                [7, 5, 4, 6, 2, 9, 3, 8, 1],
                [8, 9, 6, 3, 5, 1, 4, 2, 7],
                [2, 1, 3, 4, 8, 7, 9, 5, 0],
                [1, 6, 9, 8, 7, 2, 5, 3, 4],
                [4, 7, 2, 1, 3, 5, 8, 6, 9],
                [3, 8, 5, 9, 6, 4, 7, 1, 2]]
        self.assertTrue(ss.check_rows(grid, 2, 1, 3))


class TestCheckColumns(unittest.TestCase):
    def test_false(self):
        grid = [[6, 2, 7, 5, 9, 8, 1, 4, 3],
                [9, 4, 8, 2, 1, 3, 6, 7, 5],
                [5, 3, 1, 7, 4, 6, 2, 9, 8],
                [7, 5, 4, 6, 2, 9, 3, 8, 1],
                [8, 9, 6, 3, 5, 1, 4, 2, 7],
                [2, 1, 3, 4, 8, 7, 9, 5, 0],
                [1, 6, 9, 8, 7, 2, 5, 3, 4],
                [4, 7, 2, 1, 3, 5, 8, 6, 9],
                [3, 8, 5, 9, 6, 4, 7, 1, 2]]
        self.assertFalse(ss.check_columns(grid, 2, 1, 3))

    def test_true(self):
        grid = [[6, 2, 7, 5, 9, 8, 1, 4, 3],
                [9, 4, 8, 2, 1, 3, 6, 7, 5],
                [5, 3, 1, 7, 4, 6, 2, 9, 8],
                [7, 5, 4, 6, 2, 9, 3, 8, 1],
                [8, 9, 6, 2, 5, 1, 4, 2, 7],
                [2, 1, 3, 4, 8, 7, 9, 5, 0],
                [1, 6, 9, 8, 7, 2, 5, 3, 4],
                [4, 7, 2, 1, 3, 5, 8, 6, 9],
                [3, 8, 5, 9, 6, 4, 7, 1, 2]]
        self.assertTrue(ss.check_columns(grid, 2, 1, 3))


class TestCheckBoxes(unittest.TestCase):
    def test_false(self):
        grid = [[6, 2, 7, 5, 9, 8, 1, 4, 3],
                [9, 4, 8, 2, 1, 3, 6, 7, 5],
                [5, 3, 1, 7, 4, 6, 2, 9, 8],
                [7, 5, 4, 6, 2, 9, 3, 8, 1],
                [8, 9, 6, 3, 5, 1, 4, 2, 7],
                [2, 1, 3, 4, 8, 7, 9, 5, 0],
                [1, 6, 9, 8, 7, 2, 5, 3, 4],
                [4, 7, 2, 1, 3, 5, 8, 6, 9],
                [3, 8, 5, 9, 6, 4, 7, 1, 2]]
        self.assertFalse(ss.check_boxes(grid, 2, 1, 3))

    def test_true(self):
        grid = [[6, 2, 7, 5, 2, 8, 1, 4, 3],
                [9, 4, 8, 2, 1, 3, 6, 7, 5],
                [5, 3, 1, 7, 4, 6, 2, 9, 8],
                [7, 5, 4, 6, 2, 9, 3, 8, 1],
                [8, 9, 6, 3, 5, 1, 4, 2, 7],
                [2, 1, 3, 4, 8, 7, 9, 5, 0],
                [1, 6, 9, 8, 7, 2, 5, 3, 4],
                [4, 7, 2, 1, 3, 5, 8, 6, 9],
                [3, 8, 5, 9, 6, 4, 7, 1, 2]]
        self.assertTrue(ss.check_boxes(grid, 2, 1, 3))


class TestCheckClashes(unittest.TestCase):
    def test_true(self):
        grid = [[6, 2, 7, 5, 9, 8, 1, 4, 3],
                [9, 4, 8, 2, 1, 3, 6, 7, 5],
                [5, 3, 1, 7, 4, 6, 2, 9, 8],
                [7, 5, 4, 6, 2, 9, 3, 8, 1],
                [8, 9, 6, 3, 5, 1, 4, 2, 7],
                [2, 1, 3, 4, 8, 7, 9, 5, 0],
                [1, 6, 9, 8, 7, 2, 5, 3, 4],
                [4, 7, 2, 1, 3, 5, 8, 6, 9],
                [3, 8, 5, 9, 6, 4, 7, 1, 2]]
        self.assertTrue(ss.check_if_safe(grid, 2, 1, 3))

    def test_false_rows(self):
        grid = [[6, 2, 7, 5, 9, 8, 1, 4, 3],
                [9, 4, 8, 2, 1, 2, 6, 7, 5],
                [5, 3, 1, 7, 4, 6, 2, 9, 8],
                [7, 5, 4, 6, 2, 9, 3, 8, 1],
                [8, 9, 6, 3, 5, 1, 4, 2, 7],
                [2, 1, 3, 4, 8, 7, 9, 5, 0],
                [1, 6, 9, 8, 7, 2, 5, 3, 4],
                [4, 7, 2, 1, 3, 5, 8, 6, 9],
                [3, 8, 5, 9, 6, 4, 7, 1, 2]]
        self.assertFalse(ss.check_if_safe(grid, 2, 1, 3))

    def test_false_columns(self):
        grid = [[6, 2, 7, 5, 9, 8, 1, 4, 3],
                [9, 4, 8, 2, 1, 3, 6, 7, 5],
                [5, 3, 1, 7, 4, 6, 2, 9, 8],
                [7, 5, 4, 2, 2, 9, 3, 8, 1],
                [8, 9, 6, 3, 5, 1, 4, 2, 7],
                [2, 1, 3, 4, 8, 7, 9, 5, 0],
                [1, 6, 9, 8, 7, 2, 5, 3, 4],
                [4, 7, 2, 1, 3, 5, 8, 6, 9],
                [3, 8, 5, 9, 6, 4, 7, 1, 2]]
        self.assertFalse(ss.check_if_safe(grid, 2, 1, 3))

    def test_false_boxes(self):
        grid = [[6, 2, 7, 5, 2, 8, 1, 4, 3],
                [9, 4, 8, 2, 1, 3, 6, 7, 5],
                [5, 3, 1, 7, 4, 6, 2, 9, 8],
                [7, 5, 4, 6, 2, 9, 3, 8, 1],
                [8, 9, 6, 3, 5, 1, 4, 2, 7],
                [2, 1, 3, 4, 8, 7, 9, 5, 0],
                [1, 6, 9, 8, 7, 2, 5, 3, 4],
                [4, 7, 2, 1, 3, 5, 8, 6, 9],
                [3, 8, 5, 9, 6, 4, 7, 1, 2]]
        self.assertFalse(ss.check_if_safe(grid, 2, 1, 3))

    def test_multiple_clashes(self):
        grid = [[6, 2, 7, 5, 2, 8, 1, 4, 3],
                [9, 4, 8, 2, 1, 2, 6, 7, 5],
                [5, 3, 1, 2, 4, 6, 2, 9, 8],
                [7, 5, 4, 6, 2, 9, 3, 8, 1],
                [8, 9, 6, 3, 5, 1, 4, 2, 7],
                [2, 1, 3, 4, 8, 7, 9, 5, 0],
                [1, 6, 9, 8, 7, 2, 5, 3, 4],
                [4, 7, 2, 1, 3, 5, 8, 6, 9],
                [3, 8, 5, 9, 6, 4, 7, 1, 2]]
        self.assertFalse(ss.check_if_safe(grid, 2, 1, 3))


class TestSolveSudoku(unittest.TestCase):
    def test_true(self):
        grid = [[1, 0, 9, 8, 7, 0, 3, 6, 2],
                [7, 3, 8, 5, 2, 6, 4, 1, 9],
                [6, 4, 2, 1, 3, 9, 0, 8, 5],
                [9, 7, 6, 4, 0, 8, 2, 5, 3],
                [4, 2, 5, 9, 6, 3, 8, 0, 1],
                [3, 8, 1, 0, 5, 2, 6, 9, 4],
                [8, 0, 3, 2, 9, 0, 1, 4, 7],
                [2, 9, 7, 6, 0, 1, 5, 3, 8],
                [5, 1, 4, 3, 8, 7, 9, 0, 6]]

        secondGrid = [[1, 5, 9, 8, 7, 4, 3, 6, 2],
                      [7, 3, 8, 5, 2, 6, 4, 1, 9],
                      [6, 4, 2, 1, 3, 9, 7, 8, 5],
                      [9, 7, 6, 4, 1, 8, 2, 5, 3],
                      [4, 2, 5, 9, 6, 3, 8, 7, 1],
                      [3, 8, 1, 7, 5, 2, 6, 9, 4],
                      [8, 6, 3, 2, 9, 5, 1, 4, 7],
                      [2, 9, 7, 6, 4, 1, 5, 3, 8],
                      [5, 1, 4, 3, 8, 7, 9, 2, 6]]

        ss.solve_sudoku(grid)
        self.assertEqual(grid, secondGrid)


class TestFindAllSolutions(unittest.TestCase):
    def test_first_case(self):
        grid = [[1, 5, 9, 8, 7, 4, 3, 6, 2],
                [7, 3, 8, 5, 2, 6, 4, 0, 9],
                [6, 4, 2, 0, 3, 9, 7, 8, 5],
                [9, 7, 6, 4, 1, 8, 0, 5, 3],
                [4, 2, 5, 9, 6, 3, 8, 7, 1],
                [3, 8, 1, 7, 5, 2, 6, 9, 4],
                [8, 6, 3, 2, 9, 5, 1, 4, 7],
                [2, 9, 7, 6, 4, 0, 5, 3, 8],
                [5, 1, 4, 3, 8, 7, 9, 2, 6]]

        solutions = ss.find_all_solutions(grid)

        self.assertEqual(solutions, 1)

    def test_second_case(self):
        grid = [[0, 5, 7, 8, 0, 3, 9, 1, 0],
                [1, 4, 0, 6, 7, 5, 2, 0, 8],
                [0, 8, 2, 0, 4, 1, 7, 6, 0],
                [9, 1, 4, 2, 5, 8, 3, 7, 6],
                [7, 6, 5, 1, 3, 4, 0, 2, 9],
                [8, 2, 3, 0, 0, 9, 4, 5, 1],
                [0, 3, 6, 0, 0, 2, 1, 9, 7],
                [4, 7, 1, 0, 0, 6, 5, 8, 2],
                [2, 9, 8, 5, 1, 7, 6, 4, 0]]

        solutions = ss.find_all_solutions(grid)

        self.assertEqual(solutions, 1)

    def test_third_case(self):
        grid = [[1, 0, 0, 6, 0, 0, 0, 0, 0],
                [0, 0, 0, 4, 0, 9, 6, 0, 0],
                [9, 3, 0, 7, 0, 0, 0, 0, 8],
                [0, 9, 8, 1, 6, 0, 7, 2, 5],
                [0, 6, 7, 3, 5, 2, 8, 9, 1],
                [0, 2, 0, 0, 7, 8, 0, 3, 6],
                [0, 7, 0, 5, 4, 0, 0, 6, 2],
                [6, 5, 9, 0, 3, 7, 1, 0, 0],
                [2, 0, 4, 0, 9, 6, 3, 5, 0]]

        solutions = ss.find_all_solutions(grid)

        self.assertEqual(solutions, 1)

    def test_no_solution_case(self):
        grid = [[1, 5, 9, 8, 7, 4, 3, 6, 2],
                [7, 3, 8, 5, 2, 6, 4, 1, 9],
                [6, 4, 2, 1, 3, 9, 7, 8, 5],
                [9, 7, 6, 4, 1, 8, 2, 5, 3],
                [4, 2, 5, 9, 6, 3, 8, 7, 1],
                [3, 8, 1, 7, 5, 2, 6, 9, 4],
                [8, 6, 3, 2, 9, 5, 1, 4, 7],
                [2, 9, 7, 6, 4, 1, 5, 3, 8],
                [5, 1, 4, 3, 8, 7, 9, 2, 6]]

        solutions = ss.find_all_solutions(grid)

        self.assertEqual(solutions, 0)


if __name__ == '__main__':
    unittest.main()
